# my-rules

1. 增量修改原则  
   每次改动必须基于现有文件进行**智能增量修改**。  
   • 禁止删除、覆盖或重新创建已有文件。 
   • 每次修改代码之前首先根据关联代码分析为什么必须这样修改，而非凭空想象和猜测。
   • 新增代码只能以“追加、插入、替换局部”形式出现。  
   • 若需重构，先提取旧逻辑为独立函数 / 模块，再在新位置调用，确保旧文件保留且可编译。

2. 功能实现前分析  
   在编写任何新功能前，强制完成以下步骤：  
   ① **扫描项目结构**：列出当前目录树、关键配置文件、入口文件。  
   ② **功能清单**：用一句话总结现有功能，再描述本次要新增的功能。  
   ③ **依赖盘点**：列出新增功能所需的外部包、API、环境变量，检查是否已存在。  
   ④ **兼容性校验**：确认新代码与现有 ESLint / TS 配置 / 构建脚本无冲突。  
   ⑤ **最小实现**：先用最少量代码（≤20 行）跑通主干逻辑，再逐步扩展。

3. 提交规范  
   每次生成代码后，附带简短说明：  
   - 修改文件列表  
   - 新增 / 修改行数  
   - 是否引入破坏性变更（Breaking Change）

4. 调试友好  
   所有改动必须满足：  
   - `npm run dev` 或等效命令能一键启动且 0 报错。  
   - 若需额外脚本 / 环境变量，必须在改动说明中给出完整启动命令。