---
description: "SmartAbp开发流程规范 - 强制步骤"
globs: ["**/*"]
alwaysApply: true
priority: 900
---

# 🔄 SmartAbp 开发流程规范

## 阶段一：代码编写前的强制准备工作

### 1. 规则加载检查
- [ ] 阅读核心开发原则
- [ ] 检查相关模板文件
- [ ] 查阅相关ADR文档

### 2. Serena代码分析
- [ ] 使用代码搜索工具查找相关实现
- [ ] 分析模块结构和依赖关系
- [ ] 避免重复代码（致命错误）

### 3. 架构理解确认
- [ ] 理解当前代码结构
- [ ] 确认技术栈和依赖关系
- [ ] 检查低代码引擎Monorepo结构

## 阶段二：工作计划审批制度

### 计划制定要求
- 使用sequential-thinking制定详细计划
- 分析工作步骤和风险评估
- 必须等待用户审批确认

### 计划必须包含
- [ ] 详细的实现步骤
- [ ] 模板使用说明
- [ ] ADR遵循情况
- [ ] 验证检查点
- [ ] 风险评估
- [ ] 时间估算

## 阶段三：TDD测试驱动开发

### 测试先行原则
- 新功能实现前必须先编写测试用例
- 测试用例必须覆盖核心业务流程和边界条件
- 测试失败后才能开始编写实现代码

### TDD循环执行
1. **红**：编写测试 → 运行测试（必须失败）
2. **绿**：编写最小实现 → 运行测试（必须通过）
3. **重构**：优化代码 → 运行测试（必须保持通过）

### 测试质量要求
- [ ] 单元测试：每个公共方法必须有对应测试
- [ ] 集成测试：关键业务流程必须有端到端测试
- [ ] 边界测试：必须覆盖异常情况和边界条件
- [ ] 性能测试：关键功能必须有性能基准测试

## 阶段四：质量验证检查

### 强制验证序列
```bash
npm run type-check   # 零类型错误
npm run lint         # 零lint错误
npm run test:coverage # ≥80%测试覆盖率
npm run build        # 零构建错误
npm run dev          # 零运行时错误
```

### 代码质量检查
- [ ] ESLint零错误零警告
- [ ] TypeScript零类型错误
- [ ] 测试覆盖率≥80%
- [ ] 性能基准达标
- [ ] 安全检查通过