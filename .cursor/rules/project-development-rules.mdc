---
alwaysApply: true
---
# 🚨 SmartAbp项目开发铁律（Cursor强制执行）

## ⚡ 开发铁律四大核心（强制执行）

### 1. 代码编写前的强制准备工作
**🔴 任何代码编写之前必须完成：**

- **必须阅读项目规则**
  - 阅读 `doc/项目开发铁律.md`
  - 阅读 `doc/编码规范.md`
  - 阅读 `doc/architecture/` 下的架构文档

- **必须使用Serena分析现有代码**
  ```typescript
  // 强制使用这些工具分析现有实现
  mcp_serena_find_symbol()        // 查找相关符号
  mcp_serena_search_for_pattern() // 搜索类似功能
  mcp_serena_get_symbols_overview() // 了解模块结构
  ```

- **严禁编写重复代码**
  - 发现相似功能必须复用
  - 新功能前必须搜索现有实现

### 2. 工作计划审批制度
**🔴 任何代码实现前必须：**

- **使用sequential-thinking制定计划**
  ```typescript
  mcp_sequential-thinking_sequentialthinking({
    thought: "详细分析工作步骤",
    // ... 制定完整计划
  })
  ```

- **等待用户审批确认**
  - 提交完整工作计划
  - 必须获得用户明确授权
  - 未经授权禁止编写代码

### 3. 质量保证流程
**🔴 每次代码修改后必须验证：**

```bash
# 强制执行序列
npm run build        # 构建验证
npm run type-check   # 类型检查  
npm run lint --fix   # 代码规范
npm run dev          # 功能测试
```

**🚨 BUG修复铁律（绝对禁令）：**
- **严禁删除代码来掩盖错误**
- **严禁使用`as any`绕过类型检查**
- **严禁使用`_parameter`规避未使用参数警告**
- **严禁注释掉报错代码**
- **必须深入理解错误根源**
- **必须实现功能性修复方案**

**错误零容忍原则：**
- 任何构建错误必须立即修复
- 任何类型错误必须立即修复
- 任何lint错误必须立即修复

### 4. 沟通增强机制
**🔴 每次交互开始必须：**

```typescript
mcp_interactive-feedback-mcp_interactive_feedback({
  project_directory: "D:\\BAOBAB\\Baobab.SmartAbp",
  summary: "工作内容简要描述"
})
```

## 📁 目录结构强制规范

### 前端目录结构（强制遵守）
```
src/SmartAbp.Vue/src/
├── views/                  # 页面视图（按模块分组）
│   ├── user/              # 用户管理模块
│   ├── project/           # 项目管理模块  
│   ├── log/               # 日志管理模块
│   ├── system/            # 系统管理模块
│   ├── auth/              # 认证相关页面
│   └── common/            # 通用页面
├── components/             # 组件（按功能分组）
│   ├── layout/            # 布局组件
│   ├── user/              # 用户相关组件
│   └── common/            # 通用组件
├── stores/modules/         # 状态管理（按模块分组）
└── styles/design-system/   # 统一设计系统
```

## 🎯 路由规范（强制）

### 扁平化路由结构
```typescript
// 强制使用这种路由结构
const routes = [
  { path: '/', redirect: '/dashboard' },
  { path: '/dashboard', component: SmartAbpLayout, name: 'Dashboard' },
  { path: '/User', component: SmartAbpLayout, children: [...] },
  { path: '/Project', component: SmartAbpLayout, children: [...] },
  { path: '/Log', component: SmartAbpLayout, children: [...] },
  { path: '/Admin', component: SmartAbpLayout, children: [...] }
]
```

## 🎨 样式规范（强制）

### 设计系统使用
```css
/* ✅ 强制使用：设计系统变量 */
.component {
  background: var(--theme-brand-primary);
  color: var(--theme-text-inverse);
  padding: var(--spacing-4);
}

/* ❌ 严禁使用：硬编码值 */
.component {
  background: #0ea5e9;  /* 禁止 */
  color: #ffffff;       /* 禁止 */
  padding: 16px;        /* 禁止 */
}
```

## 🚀 低代码引擎开发流程（强制）

### 低代码引擎开发四阶段铁律
**🔴 严格按照P0-P3阶段顺序开发：**

#### P0阶段：前端代码生成器开发
```typescript
// 🔥 强制开发序列
1. Schema设计和验证器实现     // 第一优先级
2. Vue3代码生成器核心开发     // 第二优先级  
3. 插件系统架构搭建          // 第三优先级
4. 设计系统集成和样式生成     // 第四优先级
5. TypeScript类型生成        // 第五优先级
6. 性能优化和测试覆盖        // 第六优先级

// ❌ 严禁跳过阶段或颠倒顺序
```

#### P1阶段：后端代码生成器开发
```csharp
// 🔥 强制开发序列
1. ABP vNext实体生成器        // 必须先实现
2. 服务层代码生成器          // 依赖实体生成器
3. 控制器API生成器           // 依赖服务层
4. DTO映射生成器             // 依赖实体和服务
5. 权限系统集成             // 依赖控制器
6. 多租户支持实现            // 最后集成

// ❌ 严禁不按依赖关系开发
```

#### P2阶段：可视化设计器开发
```typescript
// 🔥 强制开发序列
1. 拖拽引擎核心实现          // 基础能力
2. 实时预览系统             // 依赖拖拽引擎
3. CRDT实时协作             // 依赖预览系统
4. AI辅助设计集成            // 依赖协作系统
5. 主题引擎深度集成          // 依赖AI系统
6. 性能优化和用户体验       // 最终优化

// ❌ 严禁同时开发多个功能模块
```

#### P3阶段：跨端代码生成器开发
```typescript
// 🔥 强制开发序列
1. UniApp核心生成器          // 基础平台支持
2. 平台适配层实现            // H5/小程序/App
3. 原生性能优化             // 平台特有优化
4. 跨平台兼容性保证          // 兼容性测试
5. 一键部署系统             // 部署自动化
6. 完整性测试和文档         // 最终验收

// ❌ 严禁不完成前序阶段就开始后续阶段
```

### 低代码引擎代码审查强制要求
**🔴 每个阶段必须通过的检查：**

```bash
# 强制执行的低代码引擎检查序列
1. Schema验证检查 (ajv validate schemas/)
2. 代码生成质量检查 (npm run lowcode:quality)
3. 性能基准测试 (npm run lowcode:benchmark)
4. 安全漏洞扫描 (npm run lowcode:security)
5. 生成代码兼容性测试 (npm run lowcode:compatibility)
6. 插件沙箱隔离验证 (npm run lowcode:sandbox)
```

### 低代码引擎开发禁令
1. **跳过Schema设计直接开发生成器** - 严禁
2. **生成不符合TypeScript规范的代码** - 严禁
3. **不进行性能基准测试** - 严禁
4. **不实现插件沙箱隔离** - 严禁
5. **跳过安全漏洞扫描** - 严禁
6. **不按P0-P3阶段顺序开发** - 严禁

## 🚫 严禁事项

### 绝对禁止的操作
1. **跳过Serena代码分析** - 必须分析现有实现
2. **未经审批编写代码** - 必须提交计划等待批准
3. **跳过质量检查** - 必须通过所有验证
4. **硬编码样式值** - 必须使用设计系统变量
5. **创建重复代码** - 必须复用现有实现
6. **违反低代码引擎开发流程** - 必须按阶段顺序开发

### 命名规范（强制）
- **Vue组件**: PascalCase `UserManagementView.vue`
- **TypeScript文件**: camelCase `userService.ts`
- **CSS类**: kebab-case `.user-management`
- **变量**: camelCase `userName`
- **常量**: UPPER_SNAKE_CASE `API_BASE_URL`

## ⚠️ 违反规则的处理

### 自动检查机制
- Cursor将自动检查是否遵循规则
- 违反规则的代码将被标记
- 必须修正后才能继续

### 处罚措施
1. **第一次违反** - 强制学习规则文档
2. **重复违反** - 代码回滚，重新开始
3. **严重违反** - 暂停开发权限

## ✅ 成功检查清单

### 每次开发前检查
- [ ] 已调用 interactive-feedback
- [ ] 已阅读项目铁律和编码规范  
- [ ] 已使用Serena分析现有代码
- [ ] 已制定detailed工作计划
- [ ] 已获得用户审批确认

### 每次提交前检查
- [ ] npm run build 通过
- [ ] npm run type-check 通过
- [ ] npm run lint --fix 通过
- [ ] 功能测试通过
- [ ] 无重复代码
- [ ] 使用设计系统变量

---

**🔥 这些是铁律，不是建议！严格执行 = 项目成功**