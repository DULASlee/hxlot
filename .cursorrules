# SmartAbp Cursor Rules — AI Assistant Operating Guide

## 🎯 SECRET TRIGGER SYSTEM - 暗号爆雷机制 (HIDDEN ACTIVATION)

### 🔥 Master Trigger Detection (终极简化版)
```markdown
MASTER_SECRET_TRIGGER = "专家模式"

// 暗号检测逻辑 (立即生效)
当用户输入包含"专家模式"时:
    🔥 立即响应: "🔥 专家模式已激活！七重爆雷连环启动！"
    💥 EXPERT_MODE = TRUE
    🚀 QUALITY_THRESHOLD = 95  
    🛡️ COMPLETENESS_REQUIREMENT = 100%
    📚 FORCE_TEMPLATE_USAGE = TRUE
    🏛️ MANDATORY_ADR_CONSULTATION = TRUE
    ⚡ ENABLE_DEEP_ANALYSIS = TRUE
    🎯 AUTO_EXECUTE_QUALITY_CHECKS = TRUE
    🏗️ PERFECT_CODE_GENERATION = TRUE
    📋 MANDATORY_PROJECT_RULES_LOAD = TRUE
    🔍 SERENA_PROJECT_ANALYSIS = TRUE
    🔗 SEVEN_STAGE_ANALYSIS_CHAIN = TRUE
```

### ⚡ EXPERT MODE Response Protocol (专家模式响应协议 - 七重爆雷版)
```markdown
当检测到"专家模式"时，AI必须立即按此格式响应:

🔥 **专家模式已激活！七重爆雷连环启动！**

📋 **第一重爆雷：项目开发规范加载**
   ✅ 已加载《项目开发规范总览》- 最新权威规范
   ✅ 核心原则解析完成 - 极致质量律/架构先行律/独立决策律
   ✅ 强制开发流程确认 - 代码编写前准备/工作计划审批/模板与架构决策
   ✅ 安全架构铁律验证 - 输入验证/危险内容过滤/权限控制

🔍 **第二重爆雷：Serena智能项目分析**
   ✅ Serena项目深度分析启动
   ✅ 现有功能实现模式识别
   ✅ 架构约束条件提取
   ✅ 最佳实践模式发现
   ✅ 项目文件索引分析

🚀 **第三重爆雷：增量开发分析**
   ✅ 代码库深度分析 - tools/incremental-generation/scripts/analyze-codebase.js
   ✅ 现有代码模式识别
   ✅ 架构一致性验证
   ✅ 扩展点智能识别
   ✅ 兼容性全面评估

🛡️ **第四重爆雷：质量保证检查（含TDD强制验证）**
   ✅ 95分企业级质量标准执行
   ✅ 零缺陷质量要求验证
   ✅ 性能基准测试
   ✅ 安全规范全面检查
   ✅ TDD遵循率≥90%强制验证
   ✅ 测试覆盖率≥80%强制检查
   ✅ tools/quality-assurance/quality-gates.js 严格模式

🏛️ **第五重爆雷：ADR架构决策咨询**
   ✅ ADR架构决策记录查询
   ✅ 技术选型约束确认
   ✅ 设计模式应用验证
   ✅ 架构原则强制遵循

📚 **第六重爆雷：模板强制匹配**
   ✅ 项目模板库100%搜索
   ✅ 智能模板匹配算法
   ✅ 参数自动映射验证
   ✅ 规范一致性强制检查

⚙️ **第七重爆雷：完美代码生成**
   ✅ 基于七重深度分析的代码生成
   ✅ 100%项目规范符合度
   ✅ 零架构偏差保证
   ✅ 企业级最高质量标准

🏗️ **终极执行链**（含TDD强制验证）:
[规范加载 → Serena分析 → 模式识别 → TDD验证 → 模板匹配 → 质量验证 → 架构检查 → 完美生成]

💥 **专家模式承诺**（含TDD铁律）: 
   - 零妥协的质量标准
   - 零容忍的架构偏差  
   - 100%规范符合度
   - TDD遵循率≥90%强制保证
   - 企业级完美代码输出
```

### 💥 Auto-Activation Protocol (暗号触发后强制执行)
```bash
WHEN SECRET_TRIGGER_DETECTED:
    # 第一重爆雷：加载项目开发规则
    📋 read_file "doc/项目开发规范总览.md"
    
    # 第二重爆雷：阅读《项目开发规范总览》
    📚 read_file "doc/项目开发规范总览.md" --sections="核心原则,强制开发流程,架构要求"
    
    # 第三重爆雷：使用serena分析项目现有功能实现
    🔍 serena_project_analysis --mode=expert --deep-dive=true
    
    # 第四重爆雷：增量开发超级模式
    🚀 node tools/incremental-generation/scripts/analyze-codebase.js --mode=expert --deep-analysis=true
    
    # 第五重爆雷：质量保证最高级别（TDD强制验证）
    🛡️ node tools/quality-assurance/quality-gates.js --mode=strict --score-threshold=95 --standards=enterprise --tdd-enforcement=true
    
    # 第六重爆雷：ADR架构决策强制咨询
    🏛️ read_file "doc/architecture/adr/README.md" + ALL_RELEVANT_ADRS
    
    # 第七重爆雷：模板库100%强制执行
    📚 glob "templates/**/*.template.*" + SMART_TEMPLATE_MATCHING
```

### 🏛️ Standard ADR-Informed Response Protocol (标准ADR响应协议)
**When ADR consultation is triggered (outside expert mode), AI MUST respond in this format:**

```
🏛️ **ADR查询**: 正在查阅相关架构决策记录...
📋 **ADR发现**: 找到相关决策 `ADR-{number}: {title}`
🎯 **决策要点**: 
   - 选择方案: {decision}
   - 主要原因: {rationale}
   - 技术约束: {constraints}
   - 实施指导: {implementation_guidance}
⚙️ **应用到当前任务**: 
   - 遵循的原则: {principles}
   - 使用的模式: {patterns}
   - 技术选择: {technology_choices}
🏗️ **代码生成**: 基于ADR决策和模板生成代码
```

## 🎯 PROJECT OVERVIEW

**Purpose**: Deliver higher-quality code with enforceable guardrails for SmartAbp (ABP vNext backend + Vue3/TypeScript frontend + low-code engine).

**Current Tech Stack**:
- **Frontend**: Vue 3.5.13 + TypeScript 5.8 + Element Plus 2.8.8 + Pinia 3.0.3
- **Build Tools**: Vite 7.0.6 + ESLint 9.34.0 + Prettier 3.6.2
- **Testing**: Vitest 3.2.4 + Cypress 15.1.0 (80% coverage requirement)
- **Backend**: ABP vNext + .NET + Entity Framework Core
- **Low-code Engine**: Custom Vue-based visual designer + code generator

**Code Style Standards** (from .prettierrc.json):
- **Quotes**: Double quotes (`"`)
- **Semicolons**: No semicolons
- **Trailing Commas**: Always
- **Line Width**: 100 characters
- **Arrow Parens**: Always
- **End of Line**: LF

**TypeScript Configuration**:
- **Target**: ES2020
- **Module**: ESNext
- **Module Resolution**: Bundler
- **Lib**: ["ES2020", "DOM", "DOM.Iterable"]
- **Strict Mode**: Enabled with noUnusedLocals and noUnusedParameters

## 🚨 NON-NEGOTIABLE IRON LAWS

### Code Quality Standards
- **No deleting code to hide errors**. No commenting out failing code. No "as any" to bypass types.
- **Every fix must identify Root Cause** and implement functional fix with validation.
- **Do not disable lint/type rules** to pass checks. Scope any rule adjustments narrowly and justify.
- **Security/performance changes** must include threat model or metric comparison.
- **Low-code engine** (tsconfig.lowcode.json) must not cross rootDir. Use adapters/runtime injection.

### Copy/Paste & Hardcoding Prohibition
- **Do NOT paste large blocks** from cloud/web or hardcode configs that break project conventions.
- **BEFORE writing code**, align with existing architecture: directories, router, stores, API services, base classes/utils, and design system tokens.
- **New code MUST integrate** into existing module boundaries (naming, paths, imports, permissions).
- **For low-code changes**, validate generated artifacts live under appshell/*.generated.ts with banner.

## 🚨 ENHANCED TEMPLATE LIBRARY ENFORCEMENT (CRITICAL PRIORITY)

### ABSOLUTE MANDATORY RULES FOR AI CODE GENERATION

#### Rule 1: Template Discovery is NON-NEGOTIABLE
**BEFORE generating ANY code, AI MUST execute:**
```bash
glob "templates/**/*.template.*"
read_file "templates/index.json"
```
**NO EXCEPTIONS. NO SHORTCUTS. NO ASSUMPTIONS.**

#### Rule 2: Trigger Word → Template Mapping (ENFORCED)
**When user input contains these keywords, AI MUST use specified templates:**

| 用户输入关键词 | 强制使用模板 | 模板路径 |
|---|---|---|
| "创建服务"、"应用服务"、"CRUD"、"增删改查" | CrudAppService | `templates/backend/application/CrudAppService.template.cs` |
| "管理页面"、"管理组件"、"数据管理" | CrudManagement | `templates/frontend/components/CrudManagement.template.vue` |
| "状态管理"、"Store"、"Pinia" | EntityStore | `templates/frontend/stores/EntityStore.template.ts` |
| "DTO"、"数据传输对象" | EntityDto系列 | `templates/backend/contracts/*Dto.template.cs` |
| "服务接口"、"应用服务接口" | ServiceInterface | `templates/backend/contracts/CrudAppServiceInterface.template.cs` |
| "低代码插件"、"引擎插件" | LowCodePlugin | `templates/lowcode/plugins/LowCodePlugin.template.ts` |
| "代码生成器"、"生成器" | CodeGenerator | `templates/lowcode/generators/CodeGenerator.template.ts` |
| "运行时组件"、"低代码组件" | RuntimeComponent | `templates/lowcode/runtime/RuntimeComponent.template.vue` |

#### Rule 3: Mandatory Response Protocol (EXACT FORMAT REQUIRED)
**AI MUST respond in this EXACT format - NO DEVIATIONS:**

```
🔍 **模板搜索**: 正在查找 {需求类型} 相关模板...
📋 **模板发现**: 找到模板 `{template_path}`
⚙️ **参数映射**: 
   - EntityName: {实体名称PascalCase}
   - entityName: {实体名称camelCase}
   - ModuleName: {模块名称}
   - entityDisplayName: {中文显示名称}
🏗️ **代码生成**: 基于模板 `{template_id}` 生成代码
✅ **合规检查**: 
   - [x] 使用了项目模板
   - [x] 符合ABP框架规范
   - [x] 遵循项目命名约定
   - [x] 包含权限检查（如需要）
   - [x] 使用标准依赖注入
   - [x] 符合Vue 3 Composition API规范
   - [x] 遵循Element Plus组件规范
   - [x] 符合TypeScript严格模式
📄 **生成的代码**:
[在此处输出完整的基于模板生成的代码]
```

#### Rule 4: Template Parameter Standards (MUST FOLLOW)
```typescript
// 标准模板参数 - 必须正确映射
interface TemplateParameters {
  EntityName: string        // PascalCase: Product, User, Order
  entityName: string        // camelCase: product, user, order
  ModuleName: string        // 模块名: Catalog, Identity, Sales
  entityDisplayName: string // 显示名: 产品, 用户, 订单
  "kebab-case-name": string // 短横线: product-management
}
```

#### Rule 5: Automatic Template Discovery Commands
**AI must execute these specific commands based on user input:**
- 用户提及"CRUD" → `glob "templates/**/*crud*.template.*"`
- 用户提及"管理" → `glob "templates/**/*management*.template.*"`
- 用户提及"Store" → `glob "templates/**/*store*.template.*"`
- 用户提及"DTO" → `glob "templates/**/*dto*.template.*"`
- 用户提及"服务" → `glob "templates/**/*service*.template.*"`
- 用户提及"低代码" → `glob "templates/lowcode/**/*.template.*"`

## 🏛️ ARCHITECTURE DECISION RECORDS (ADR) COMPLIANCE (MANDATORY)

### ADR Integration Rules
- **BEFORE making any architectural decisions, AI MUST consult relevant ADRs in doc/architecture/adr/**
- **ADR decisions are BINDING and must be followed in all code generation**
- **When user asks "why" questions about technology choices, reference specific ADRs**

### Mandatory ADR Consultation Triggers（含TDD架构决策）
**When user mentions these topics, AI MUST check corresponding ADRs:**

| 用户输入关键词 | 必须查阅的ADR | ADR文件 |
|---|---|---|
| "技术选型"、"框架选择"、"为什么用XXX" | 技术栈选择 | `0001-technology-stack-selection.md` |
| "前端架构"、"Vue架构"、"组件设计" | 前端架构决策 | `0002-frontend-architecture.md` |
| "后端架构"、"ABP架构"、"微服务" | 后端架构决策 | `0003-backend-architecture.md` |
| "数据库设计"、"实体设计" | 数据库设计 | `0004-database-design.md` |
| "认证"、"授权"、"权限" | 认证策略 | `0005-authentication-strategy.md` |
| "缓存"、"性能优化" | 缓存策略 | `0006-caching-strategy.md` |
| "日志"、"监控" | 日志策略 | `0007-logging-strategy.md` |
| "错误处理"、"异常处理" | 错误处理 | `0008-error-handling.md` |
| "性能优化"、"性能问题" | 性能优化 | `0009-performance-optimization.md` |
| "设计模式"、"代码结构" | 设计模式应用 | `0010-design-patterns.md` |
| "低代码"、"引擎架构" | 低代码引擎架构 | `0011-lowcode-engine-architecture.md` |
| "TDD"、"测试驱动"、"测试架构" | TDD架构决策 | `0012-test-driven-development-strategy.md` |

### ADR-Informed Response Protocol (EXACT FORMAT REQUIRED)
**When ADR consultation is triggered, AI MUST respond in this format:**

```
🏛️ **ADR查询**: 正在查阅相关架构决策记录...
📋 **ADR发现**: 找到相关决策 `ADR-{number}: {title}`
🎯 **决策要点**: 
   - 选择方案: {decision}
   - 主要原因: {rationale}
   - 技术约束: {constraints}
   - 实施指导: {implementation_guidance}
⚙️ **应用到当前任务**: 
   - 遵循的原则: {principles}
   - 使用的模式: {patterns}
   - 技术选择: {technology_choices}
🏗️ **代码生成**: 基于ADR决策和模板生成代码
```

## 🔄 INCREMENTAL CODE GENERATION (MANDATORY)

### 增量生成触发规则（含TDD强制验证）
当用户请求包含以下关键词时，AI必须启用增量生成模式：

| 触发关键词 | 生成模式 | 必须执行的命令 |
|---|---|---|
| "基于现有"、"扩展"、"增加功能" | 增量扩展 | `node tools/incremental-generation/scripts/analyze-codebase.js --target={target_file} --tdd-enforcement=true` |
| "重构"、"优化"、"改进" | 智能重构 | `node tools/incremental-generation/analyzers/refactor-advisor.js --file={target_file} --tdd-validation=true` |
| "生成测试"、"添加测试" | 自动测试生成 | `node tools/incremental-generation/generators/test-generator.js --target={target_service} --tdd-first=true` |
| "兼容"、"不破坏现有" | 兼容性分析 | `node tools/incremental-generation/scripts/validate-changes.js --type=compatibility --tdd-compliance=true` |
| "TDD"、"测试驱动"、"测试先行" | TDD专项生成 | `node tools/incremental-generation/generators/tdd-generator.js --mode=strict --tdd-first=true` |
| "新功能"、"新模块"、"新服务" | TDD优先开发 | `node tools/incremental-generation/generators/tdd-first-generator.js --mode=expert --tdd-enforcement=true` |

### AI增量生成响应协议（强制格式 - 含TDD验证）
```
🔍 **增量分析**: 正在分析 {target_file}...
   - 现有模式: {identified_patterns}
   - 代码风格: {coding_style}  
   - 依赖关系: {dependencies}
   - 扩展点: {extension_points}
   - TDD遵循率: {current_tdd_compliance}

📊 **增量策略**: 选择策略 {selected_strategy}
   - 扩展方式: {extension_approach}
   - 兼容性级别: {compatibility_level}
   - 预期影响: {expected_impact}
   - 风险评估: {risk_assessment}
   - TDD要求: {tdd_requirements}

⚙️ **代码生成**: 基于现有代码模式生成增量代码（TDD优先）
   - 生成文件: {generated_files}
   - 修改文件: {modified_files}  
   - 新增测试: {new_tests} (TDD红-绿-重构循环)
   - 更新文档: {updated_docs}
   - TDD验证: {tdd_validation_steps}

✅ **验证结果**: 
   - [x] 兼容性检查通过
   - [x] 代码风格一致
   - [x] 测试覆盖充分 (≥80%)
   - [x] TDD遵循率≥90%
   - [x] 红-绿-重构循环完成
   - [x] 构建成功
   - [x] 不破坏现有功能
   - [x] 符合架构约束

📄 **生成的代码**:
[在此处输出完整的基于TDD的增量生成代码]
```

## 📋 TASK WORKFLOW (MUST FOLLOW)

### 1) Kickoff & Intent Sync
- Summarize what just happened and what you will do next in 1–2 sentences.
- Call interactive-feedback tool when starting substantial tasks or when context changes significantly.

### 🔍 Discovery First (MANDATORY SEQUENCE - 七重爆雷版)
- **Step 1**: Load project development rules (doc/项目开发规范总览.md) - 理解最新规范（含TDD铁律）
- **Step 2**: Serena项目分析 - 深度理解项目现有功能实现模式（含TDD实践）
- **Step 3**: 增量分析现有代码 - tools/incremental-generation/scripts/analyze-codebase.js（TDD遵循率分析）
- **Step 4**: 质量门控检查 - tools/quality-assurance/quality-gates.js（TDD强制验证）
- **Step 5**: ADR决策查询 - 搜索相关架构决策（含TDD架构决策）
- **Step 6**: 模板匹配 - 基于七重分析结果选择最佳模板（优先TDD友好模板）
- **Step 7**: 生成符合七重爆雷标准且满足TDD要求的完美代码

### 3) Plan Before Edit
- Use sequential thinking to sketch steps, risks, and verification points.
- Present a brief plan to the user; proceed unless blocked (assume autonomy if no response).

### 4) Todo & Status Discipline
- Maintain a todo list for multi-step work. Mark one item in_progress at a time.
- Provide brief status updates before tool calls and before finishing each turn.

### 5) Editing Rules
- **Code Style Compliance**: Follow project standards (double quotes, no semicolons, 100 char width)
- **TypeScript Standards**: Use strict mode, proper typing, avoid `any`
- **Vue 3 Standards**: Use Composition API, `<script setup>`, proper reactivity
- **Element Plus Integration**: Use proper component imports and theming
- **ABP Framework**: Follow ABP conventions for services, DTOs, permissions
- Only edit what's necessary. Preserve existing indentation and formatting.
- For new code, add imports/types/deps so it runs immediately.

### 6) Quality Gates (MUST run or propose commands - TDD强制执行)
- **Type check**: `npm run type-check` (or `tsc --noEmit`)
- **Lint**: `npm run lint --fix` (don't silence rules; fix root causes)
- **TDD验证**: `npm run test:coverage -- --tdd-enforcement=true` (TDD遵循率≥90%)
- **测试覆盖率**: `npm run test:coverage` (覆盖率≥80%)
- **Build**: `npm run build`
- **TDD检查**: `npm run test:tdd-compliance` (新增TDD合规检查)
- If any gate fails, fix before proceeding. On third failed attempt, ask user.

### 7) Commands & Tools
- Propose shell commands with non-interactive flags; assume no manual input.
- Long-running tasks should run in background.
- Prefer semantic code search for meaning; use grep for exact tokens.

### 8) Documentation Hygiene
- If rules/architecture/process change, update doc/项目编程规则.md.
- When adding/updating features, adjust or add minimal docs and examples.

### 9) Communication & Output Style
- Be concise and skimmable. Use short sections and bullets.
- Show only relevant code snippets. For existing code, cite with path.
- Provide short end-of-turn summary of what changed and its impact.

### 10) Security & Compliance
- Never embed secrets. Use project logging adapter instead of console.* in production.
- Do not bypass sandbox/safety checks for SFC preview in production.

### 11) Backend/Frontend Contract
- Keep permission names, route names, and policies consistent across backend and frontend.
- Use DTOs with consistent paging/sorting fields.

## 🎯 FRAMEWORK-SPECIFIC GUIDELINES

### Vue 3 + TypeScript Standards
- **Composition API**: Always use `<script setup>` syntax
- **Reactivity**: Use `ref()`, `reactive()`, `computed()` appropriately
- **Props**: Define with `defineProps<T>()` with TypeScript interfaces
- **Emits**: Define with `defineEmits<T>()` with proper typing
- **Stores**: Use Pinia with TypeScript, follow naming convention `use{Entity}Store`
- **Components**: Use PascalCase for component names, kebab-case for file names

### Element Plus Integration
- **Import Strategy**: Use auto-import from unplugin-vue-components
- **Theming**: Follow project's design tokens and CSS variables
- **Icons**: Use `@element-plus/icons-vue` with proper tree-shaking
- **Form Validation**: Use Element Plus form validation with TypeScript

### ABP Framework Standards
- **Services**: Inherit from `SmartAbpAppService`, use `IRepository<T>`
- **DTOs**: Follow naming convention: `{Entity}Dto`, `Create{Entity}Dto`, `Update{Entity}Dto`
- **Permissions**: Use consistent permission names across backend/frontend
- **Localization**: Use ABP localization system for all user-facing text

### Low-code Engine Standards
- **Plugins**: Implement `metadata`, `canHandle`, `validate`, `generate` methods
- **Runtime**: Use sandbox execution (iframe/Worker + CSP) for dev preview
- **Generated Files**: Include "// AUTO-GENERATED FILE – DO NOT EDIT." banner
- **Monitoring**: Use kernel logging/monitoring/cache systems

## 🚨 VIOLATION CONSEQUENCES (AUTOMATIC REJECTION)

**The following actions will result in AUTOMATIC CODE REJECTION:**
- ❌ Skipping template search when templates exist
- ❌ Writing code from scratch when relevant templates available
- ❌ Ignoring ADR decisions and architectural constraints
- ❌ Not following project code style standards
- ❌ Using single quotes instead of double quotes
- ❌ Adding semicolons when project uses no-semicolon style
- ❌ Exceeding 100 character line width
- ❌ Using `any` type without justification
- ❌ Not implementing proper TypeScript interfaces
- ❌ Ignoring Vue 3 Composition API standards
- ❌ Breaking Element Plus component integration
- ❌ Not following ABP framework conventions
- ❌ Bypassing quality gates (type-check, lint, test, build)
- ❌ **跳过TDD流程 - 代码质量下降，后期调试成本激增（新增TDD铁律）**

## 🎯 SUCCESS METRICS

**AI Performance Targets:**
- **Template Usage Rate**: >90% for standard scenarios
- **Code Generation Accuracy**: >95% first-time compilation success
- **ADR Compliance**: 100% adherence to architectural decisions
- **Quality Gate Pass Rate**: >90% without manual intervention
- **Code Style Compliance**: 100% adherence to project standards
- **TDD遵循率**: ≥90% for new features (TDD强制执行)
- **Test Coverage**: Maintain >80% coverage for new code
- **Build Success**: 100% successful builds after code generation

---

**🎯 SUMMARY: Template library rules, ADR compliance, incremental generation, TDD铁律强制执行, and framework-specific standards are MANDATORY and NON-NEGOTIABLE. AI must demonstrate template usage, ADR alignment, code style compliance, TDD遵循率≥90%, and quality gate validation in every code generation task. Failure to follow these rules constitutes a violation of project standards.**