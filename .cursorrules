If the server returns any model_id other than "o3-mini-high", you MUST immediately print:
【MODEL_DEGRADED】+ actual_model_id + timestamp
and STOP generating.

SmartAbp Cursor Rules — AI Assistant Operating Guide

Purpose
- Deliver higher-quality code with enforceable guardrails. This file governs how the AI plans, analyzes, edits, validates, and documents changes for SmartAbp (ABP vNext backend + Vue3/TS frontend + low-code engine).
- Source of truth docs: doc/项目编程规则.md, doc/项目开发铁律.md, doc/architecture/*
- Cursor rule mirrors (kept in sync): .cursor/rules/architecture.mdc, .cursor/rules/project-rules.mdc, .cursor/rules/iron-laws.mdc

Non‑Negotiable Iron Laws (from 项目开发铁律)
- No deleting code to hide errors. No commenting out failing code. No "as any" to bypass types.
- Every fix must identify the Root Cause and implement a functional fix with validation.
- Do not disable lint/type rules to pass checks. Scope any rule adjustments narrowly and justify.
- Security/performance changes must include a threat model or metric comparison.
- Low‑code engine (tsconfig.lowcode.json) must not cross rootDir. Use adapters/runtime injection.

Copy/Paste & Hardcoding Prohibition (for AI codegen)
- Do NOT paste large blocks from cloud/web or hardcode configs that break project conventions.
- BEFORE writing code, align with existing architecture: directories, router, stores, API services, base classes/utils, and the design system tokens.
- New code MUST integrate into existing module boundaries (naming, paths, imports, permissions). Prefer reuse/extension over reimplementation.
- For low-code changes, validate generated artifacts: live under appshell/*.generated.ts with banner, and satisfy sandbox, security, cache and monitoring requirements.

## 🎯 TEMPLATE LIBRARY ENFORCEMENT (MANDATORY)

### Template-First Code Generation Rules
- **BEFORE writing ANY code, AI MUST search for relevant templates in templates/ directory**
- **Template usage is MANDATORY for standard scenarios (CRUD, components, services)**
- **AI must explain which template was used and why**

### Template Discovery Workflow (ENFORCED)
1. **Identify code type needed** (AppService, Component, DTO, Store, etc.)
2. **Search templates directory**: Execute `glob "templates/**/*{keyword}*.template.*"`
3. **Load template metadata** from corresponding *.template.meta.yml file
4. **Apply template with parameters** (EntityName, ModuleName, etc.)
5. **Validate generated code** follows template constraints and project rules

### AI Response Pattern for Template Usage
When generating code, AI MUST follow this response pattern:

```
🔍 **模板搜索**: 正在查找 {code_type} 相关模板...
📋 **模板发现**: 找到模板 `{template_path}`
⚙️ **参数映射**: 
   - EntityName: {value}
   - ModuleName: {value}
   - 其他参数...
🏗️ **代码生成**: 基于模板生成代码
✅ **合规检查**: 代码符合模板约束和项目规范
```

### Template Search Commands
- CRUD服务: `glob "templates/**/*crud*service*.template.*"`
- 管理页面: `glob "templates/**/components/*management*.template.vue"`
- 状态管理: `glob "templates/**/stores/*store*.template.ts"`
- DTO对象: `glob "templates/**/contracts/*dto*.template.cs"`
- Vue组件: `glob "templates/frontend/components/*.template.vue"`
- ABP服务: `glob "templates/backend/application/*.template.cs"`

### Template Miss Handling
If no template found:
1. "未找到相关模板，将创建新代码并建议添加到模板库"
2. Generate code following project conventions
3. "建议将此代码模式添加到模板库: templates/{category}/{type}.template.{ext}"

### Mandatory AI Behavior Triggers
When user mentions these keywords, AI MUST check templates first:
- "创建/新增/添加" + "服务/组件/页面/实体" → Search templates/
- "CRUD操作" → Use templates/backend/application/CrudAppService.template.cs
- "管理页面" → Use templates/frontend/components/CrudManagement.template.vue
- "状态管理" → Use templates/frontend/stores/EntityStore.template.ts
- "DTO" → Use templates/backend/contracts/*Dto.template.cs

Task Workflow (MUST)
1) Kickoff & Intent Sync
- Summarize what just happened and what you will do next in 1–2 sentences.
- Call interactive-feedback tool (mcp_interactive-feedback-mcp_interactive_feedback) with project directory and short summary when starting a new substantial task or when context changes significantly.

2) Discovery First
- Read relevant docs (doc/项目编程规则.md, doc/architecture/*) before coding.
- **MANDATORY: Search templates/ directory for relevant patterns BEFORE any code generation**
- Analyze code with Serena if available: mcp_serena_find_symbol, mcp_serena_search_for_pattern, mcp_serena_get_symbols_overview. If Serena not available, use semantic search first, then grep for exact symbols.
- Prefer broad semantic search, then narrow down. Avoid guessing—find the code.

3) Plan Before Edit
- Use sequential thinking (mcp_sequential-thinking_sequentialthinking) to sketch steps, risks, and verification points.
- Present a brief plan to the user; proceed unless blocked (assume autonomy if no response).

4) Todo & Status Discipline
- Maintain a todo list for multi-step work. Mark one item in_progress at a time; update statuses after each step.
- Provide a brief status update before tool calls and before finishing each turn.

5) Editing Rules
- Only edit what's necessary. Preserve existing indentation and formatting; don't reformat unrelated code.
- Follow code style (verbose, clear names, early returns, proper typing, minimal comments explaining "why").
- For new code, add imports/types/deps so it runs immediately. Avoid unsafe casts and any.
- For low-code engine:
  - Plugins must implement metadata/canHandle/validate/generate, and use kernel logging/monitoring/cache.
  - No dynamic execution (new Function) in production; dev preview must run in sandbox (iframe/Worker + CSP).
  - Generated files must include "// AUTO-GENERATED FILE – DO NOT EDIT." and live in appshell or *.generated.ts.

6) Quality Gates (MUST run or propose commands)
- Type check: npm run type-check (or tsc --noEmit)
- Lint: npm run lint --fix (don't silence rules; fix root causes)
- Tests: npm run test:coverage (meet vitest thresholds: ~80% statements/lines, 75% branches)
- Build: npm run build
- If any gate fails, fix before proceeding. On the third failed attempt with unclear cause, ask the user.

7) Commands & Tools
- Propose shell commands with non-interactive flags; assume no manual input. If a pager may open, append " | cat".
- Long-running tasks should run in background.
- Prefer semantic code search for meaning; use grep for exact tokens; use read_file for targeted reading.

8) Documentation Hygiene
- If rules/architecture/process change, update doc/项目编程规则.md (single source of truth). Keep docs "live", not stale.
- When adding/updating features, adjust or add minimal docs and examples as needed.

9) Communication & Output Style
- Be concise and skimmable. Use short sections and bullets. Bold only key points when free-form text.
- Show only relevant code snippets. For existing code, cite with path (and minimal lines). For new code, use proper fenced blocks.
- Provide a short end-of-turn summary of what changed and its impact.

10) Security & Compliance
- Never embed secrets. Use project logging adapter instead of console.* in production (warn/error allowed in dev where configured).
- Do not bypass sandbox/safety checks for SFC preview in production.

11) Backend/Frontend Contract
- Keep permission names, route names, and policies consistent across backend and frontend.
- Use DTOs with consistent paging/sorting fields; front-end services should be the single entry point.

12) When Blocked
- If external approval is required but the user is inactive, proceed with safest defaults after stating assumptions.
- If essential information is missing and cannot be discovered by tools, ask a pointed question and pause edits.

## 🚨 ENHANCED TEMPLATE LIBRARY ENFORCEMENT (CRITICAL PRIORITY)

### ABSOLUTE MANDATORY RULES FOR AI CODE GENERATION

#### Rule 1: Template Discovery is NON-NEGOTIABLE
**BEFORE generating ANY code, AI MUST execute:**
```bash
glob "templates/**/*.template.*"
read_file "templates/index.json"
```
**NO EXCEPTIONS. NO SHORTCUTS. NO ASSUMPTIONS.**

#### Rule 2: Trigger Word → Template Mapping (ENFORCED)
**When user input contains these keywords, AI MUST use specified templates:**

| 用户输入关键词 | 强制使用模板 | 模板路径 |
|---|---|---|
| "创建服务"、"应用服务"、"CRUD"、"增删改查" | CrudAppService | `templates/backend/application/CrudAppService.template.cs` |
| "管理页面"、"管理组件"、"数据管理" | CrudManagement | `templates/frontend/components/CrudManagement.template.vue` |
| "状态管理"、"Store"、"Pinia" | EntityStore | `templates/frontend/stores/EntityStore.template.ts` |
| "DTO"、"数据传输对象" | EntityDto系列 | `templates/backend/contracts/*Dto.template.cs` |
| "服务接口"、"应用服务接口" | ServiceInterface | `templates/backend/contracts/CrudAppServiceInterface.template.cs` |

#### Rule 3: Mandatory Response Protocol (EXACT FORMAT REQUIRED)
**AI MUST respond in this EXACT format - NO DEVIATIONS:**

```
🔍 **模板搜索**: 正在查找 {需求类型} 相关模板...
📋 **模板发现**: 找到模板 `{template_path}`
⚙️ **参数映射**: 
   - EntityName: {实体名称PascalCase}
   - entityName: {实体名称camelCase}
   - ModuleName: {模块名称}
   - entityDisplayName: {中文显示名称}
🏗️ **代码生成**: 基于模板 `{template_id}` 生成代码
✅ **合规检查**: 
   - [x] 使用了项目模板
   - [x] 符合ABP框架规范
   - [x] 遵循项目命名约定
   - [x] 包含权限检查（如需要）
   - [x] 使用标准依赖注入
📄 **生成的代码**:
[在此处输出完整的基于模板生成的代码]
```

#### Rule 4: Template Parameter Standards (MUST FOLLOW)
```typescript
// 标准模板参数 - 必须正确映射
interface TemplateParameters {
  EntityName: string;        // PascalCase: Product, User, Order
  entityName: string;        // camelCase: product, user, order
  ModuleName: string;        // 模块名: Catalog, Identity, Sales
  entityDisplayName: string; // 显示名: 产品, 用户, 订单
}
```

#### Rule 5: Quality Validation Checklist (MANDATORY)
**After code generation, AI MUST verify:**
- [ ] Template was discovered and used (not written from scratch)
- [ ] All template placeholders correctly replaced
- [ ] Generated code follows ABP framework patterns
- [ ] Naming conventions match project standards
- [ ] Permission attributes added where required
- [ ] Dependency injection properly implemented
- [ ] Code is immediately runnable without errors

#### Rule 6: Violation Consequences (AUTOMATIC REJECTION)
**The following actions will result in AUTOMATIC CODE REJECTION:**
- ❌ Skipping template search when templates exist
- ❌ Writing code from scratch when relevant templates available
- ❌ Ignoring template structure and conventions
- ❌ Deviating from mandatory response format
- ❌ Incorrect parameter mapping
- ❌ Missing quality validation

#### Rule 7: Exception Protocol (RARE CASES ONLY)
**If template deviation is absolutely necessary:**
1. **MUST state explicit reason** for deviation
2. **MUST detail exact modifications** made to template
3. **MUST ensure compliance** with project standards maintained
4. **MUST suggest template updates** for future use

#### Rule 8: Template Missing Protocol
**If no relevant template exists:**
```
⚠️ **模板缺失警告**: 未找到 {需求类型} 相关模板
🏗️ **临时解决方案**: 将基于现有项目代码规范生成代码
💡 **改进建议**: 
   - 建议路径: templates/{category}/{type}.template.{ext}
   - 建议添加元数据文件: {type}.template.meta.yml
   - 建议AI触发词: {suggested_triggers}
🔄 **后续行动**: 生成代码后建议添加到模板库以供未来使用
```

### ENFORCEMENT MECHANISM

#### Automatic Template Discovery Commands
**AI must execute these specific commands based on user input:**
- 用户提及"CRUD" → `glob "templates/**/*crud*.template.*"`
- 用户提及"管理" → `glob "templates/**/*management*.template.*"`
- 用户提及"Store" → `glob "templates/**/*store*.template.*"`
- 用户提及"DTO" → `glob "templates/**/*dto*.template.*"`
- 用户提及"服务" → `glob "templates/**/*service*.template.*"`

#### Template Index Consultation
**Always check template index for metadata:**
```bash
read_file "templates/index.json"
# Look for: ai_triggers, scenarios, dependencies, parameters
```

#### Success Metrics Tracking
**AI should internally track:**
- Template usage rate (target: >90%)
- Code generation accuracy (target: >95%)
- First-time compilation success (target: >90%)
- User satisfaction with generated code

---

**🎯 SUMMARY: These template library rules are MANDATORY and NON-NEGOTIABLE. AI must demonstrate template usage in every code generation task. Failure to follow these rules constitutes a violation of project standards.**