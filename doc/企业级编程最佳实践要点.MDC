# 企业级编程最佳实践要点（低代码引擎 · 前后端）

> 三条编程规范与开发铁律（总纲，优先级最高）
> - 极致质量律：代码实现必须达到业界顶尖水平，杜绝硬编码、模式混乱与功能残缺，交付完整、强大且超越当前行业标准的解决方案。
> - 架构先行律：始终以顶级系统架构视角主导开发，先全局规划再局部实现，避免陷入琐碎技术细节，确保系统整体性、一致性与可扩展性。
> - 独立决策律：构建自主技术判断能力，主动评估用户需求的合理性，敢于质疑并纠正错误技术方案，展现深度思考与专业决策权威。

一、总体原则
- 单一事实来源（SSOT）：所有可配置项以统一元数据模型驱动（ModuleMetadata / EntityModel / UIConfig），禁止散落的“死数据”。
- 向后兼容：公共接口变更遵循 deprecate → grace period → remove 流程，并提供迁移文档/脚本。
- 可观测性优先：日志、指标、链路必须内置（后端 Serilog/OTel，前端埋点与错误边界）。
- 安全内建：认证授权、最小权限、输入验证、输出编码、审计日志、速率限制、数据脱敏。

二、后端（ABP/Roslyn/EF）
- 分层边界清晰：Domain（实体/规则）→ Application（DTO/用例）→ Infrastructure（EF）→ HttpApi（API）。
- DDD 优先：
  - 聚合根封装不变式；领域事件处理副作用；值对象表达等式；仓储仅暴露聚合根。
  - 基类选择：聚合根用 FullAuditedAggregateRoot，非聚合根用 FullAuditedEntity。
- EF 规范：
  - 显式关系配置（必/可选、删除行为、唯一索引）。
  - Migration 原子化；禁止在迁移中写业务；生成→审阅→执行。
- Roslyn 生成：
  - 模板与生成器分离；幂等生成（可重入）、检测冲突（同名文件/类型）、生成报告与回滚策略。
- API 设计：
  - REST 语义清晰；版本化；统一错误码；避免泄露内部异常。
  - AutoController 仅用于 CRUD；复杂用例采用 Application Service 明确定义。
- 性能：
  - 仓储查询首选投影与分页；避免 N+1；关键查询缓存；使用 CancellationToken。
- 安全：
  - 授权基于强类型 Permission 常量；审计敏感字段；输出 DTO 避免泄密。

三、前端（Vue3/TS/Pinia/Element Plus）
- 组合式 API：`<script setup>` + 强类型 Props/Emits；状态集中 Pinia，避免跨组件隐式耦合。
- 路由/菜单自动化：通过 AST/模板生成，禁止手写分散路由；路径/权限与后端常量映射一致。
- UI 一致性：
  - 统一设计令牌（颜色/间距/字号）；组件库二次封装避免重复样式代码。
  - 表单：校验规则集中；禁用/加载态/空态必须覆盖。
- 可用性与可靠性：
  - 错误边界与全局提示；长任务 Loading 与取消；防抖/节流；离开前保存草稿（关键步骤）。
- i18n：
  - 所有文案走字典；键分域命名；禁止硬编码中文。
- 性能：
  - 组件懒加载与路由分包；虚拟滚动；避免不必要的响应式依赖；正确使用 computed/memo。

四、低代码引擎特有
- 元数据→代码→集成 全链路：
  - 元数据变更必须触发：后端代码生成、迁移编排、前端页面/路由/菜单更新。
  - 生成过程可追踪（进度、日志、失败回滚）。
- 导入治理：
  - 从 SQL/DB 导入时进行实体去重、命名标准化（PascalCase）、属性/关系合并，给出告警。
  - 只允许在一个步骤设置数据库信息，并回写统一元数据。
- 权限与页面绑定：
  - 权限常量强类型生成；前端指令/组件读取常量，实现可见性与可用性控制。
- UIConfig 生命周期：
  - 读取→编辑→校验→保存→运行时加载；双写一致性校验（前端/后端）。

五、异常边界与错误处理
- 后端：
  - 输入校验（FluentValidation/DataAnnotations）；领域异常（业务）与系统异常（5xx）区分；统一 ProblemDetails。
- 前端：
  - API 层统一拦截器；错误码到用户友好文案的映射；必要时降级（占位/重试）。

六、测试与质量门禁
- 单元/集成/端到端：
  - 领域服务与应用服务的单元测试；生成器的金标测试；前端 Vitest + Cypress（≥80% 新增覆盖）。
- 静态检查：ESLint/TS 类型、Stylelint、后端 Analyzers；提交前必须通过。

七、性能与可观测
- 核心指标：
  - API P95/P99、DB 慢查询、前端交互延迟、构建耗时。
- APM：OpenTelemetry/分布式追踪；关键路径埋点。

八、运维与发布
- 构建：可复现构建（锁版本）；CI 产物可追溯（版本/Commit/时间）。
- 配置：区分环境（Dev/Test/Prod）；敏感信息走 Secret 管理；只读容器镜像。

九、文档与变更
- 变更说明：人读的 Changelog；生成影响列表（新增/删除/修改的文件）。
- ADR：重要架构选择以 ADR 记录，并在代码注释/README 处链接。

十、代码风格（关键摘录）
- TS：显式类型导出、避免 any、命名语义化、早返回。
- C#：命名空间/类/方法 PascalCase，私有字段 `_camelCase`；异步方法后缀 Async；避免捕获后忽略异常。

附：检查清单（PR 必过）
- [ ] 仅在单一元数据处设置配置项，并确保全链路落地
- [ ] 生成过程幂等，冲突检测与报告可用
- [ ] 权限强类型常量一致，前后端同名
- [ ] i18n 完整，无硬编码
- [ ] 性能与可观测埋点到位（关键接口/页面）
- [ ] 测试与覆盖符合阈值，构建通过
