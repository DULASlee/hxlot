using System.IO;
using System.Text;
using System.Threading.Tasks;
using Volo.Abp.DependencyInjection;

namespace SmartAbp.CodeGenerator.Services
{
    /// <summary>
    /// A utility service to handle writing generated code to files,
    /// supporting a hybrid model that separates generated and manual code.
    /// </summary>
    public class CodeWriterService : ITransientDependency
    {
        /// <summary>
        /// Writes content to a specified file path, creating the directory if it doesn't exist.
        /// </summary>
        /// <param name="filePath">The full path of the file to write.</param>
        /// <param name="content">The content to write to the file.</param>
        public async Task WriteFileAsync(string filePath, string content)
        {
            var dir = Path.GetDirectoryName(filePath);
            if (!string.IsNullOrEmpty(dir) && !Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }
            await File.WriteAllTextAsync(filePath, content, Encoding.UTF8);
        }

        /// <summary>
        /// Writes generated code to a .generated.cs file and ensures a manual .cs file exists.
        /// </summary>
        /// <param name="filePath">The base path for the file, e.g., "Services/ProjectManagementService.cs"</param>
        /// <param name="generatedContent">The code content generated by the engine.</param>
        /// <param name="manualFileNamespace">The namespace for the manual file, e.g., "SmartAbp.ProjectManagement.Services"</param>
        /// <param name="className">The name of the class, e.g., "ProjectManagementService"</param>
        /// <returns>A tuple containing the paths of the generated file and the manual file.</returns>
        public async Task<(string generatedFilePath, string manualFilePath)> WriteHybridCodeAsync(
            string filePath,
            string generatedContent,
            string manualFileNamespace,
            string className)
        {
            var generatedFilePath = Path.ChangeExtension(filePath, ".generated.cs");
            var manualFilePath = filePath;

            // Always overwrite the generated file
            await File.WriteAllTextAsync(generatedFilePath, generatedContent, Encoding.UTF8);

            // Create the manual file only if it doesn't exist
            if (!File.Exists(manualFilePath))
            {
                var manualContent = GetManualFilePlaceholder(manualFileNamespace, className);
                await File.WriteAllTextAsync(manualFilePath, manualContent, Encoding.UTF8);
            }

            return (generatedFilePath, manualFilePath);
        }

        private string GetManualFilePlaceholder(string ns, string className)
        {
            return
$@"namespace {ns}
{{
    public partial class {className}
    {{
        // Write your custom business logic here.
        // This file will not be overwritten by the code generator.
    }}
}}
";
        }
    }
}
